
Situation:
The customer has a development department, which is constantly changing its own software, which is used in the operation.
So far, reputations for recompiled files have been added to the TIE server by hand. Now it should be automated by REST API.

This script uses the system.io.filesystemwatcher class to monitor a given folder for file changes. In a variable ($extensionfilter) you can specify file extensions for which you want to generate reputations.
The OnCreate, OnRename, OnChange Events generated by the FileSystemWatcher Object are cached in a collection ($EventsArrayList) for later processing. This is then processed every 2 seconds. See CheckFilterEventType function. This filters out unwanted events and calls ProcessReputation.

The ProcessReputation function forms hash values ​​for files, passes them to ImportReputation and, after a successful import, moves corresponding files to a backup folder ($PathToCopyAwayFolder). If necessary, these are renamed (counted up).

The actual webrequest to the EPO server happens in the ImportReputation function. Here it is checked whether a connection to the EPO server is possible, a session socket fetched from the server, URL for the web request formed and the actual web request issued.

All relevant processes (including successful ones) are written to a log file. See the SHU_ImportReputationError.log.

The script is to be executed as a windows task. Since i did not implement an endless loop, you have to call it with the switch -noexit.

For testing via the CMD: powershell -noexit -file "path_to \ SHU_ImportReputation.ps1"
There are also messages logged to the console.
To break, just type "exit" to exit.

Before executing, the following variables should be set at the beginning of the script:
$ EPOSERVER
$ PathToReputationShareFolder
$ ErrLogPath
$ PathToCopyAwayFolder
$ File reputation
$ Extension filter

EPO user and password are hidden in plain text in ImportReputation function. Adjust them to yours own before running script.

Everything is well commented in the script, i think.